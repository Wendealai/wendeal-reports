generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  password      String
  avatar        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categories    Category[]
  reports       Report[]
  savedSearches SavedSearch[]
  searchHistory SearchHistory[]

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  userId      String
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  reports     Report[]

  @@map("categories")
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  color      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  reportTags ReportTag[]

  @@map("tags")
}

model Report {
  id          String      @id @default(cuid())
  title       String
  content     String
  description String?
  summary     String?
  status      String      @default("draft")
  priority    String      @default("medium")
  categoryId  String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  files       File[]
  reportTags  ReportTag[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])

  @@map("reports")
}

model ReportTag {
  id       String @id @default(cuid())
  reportId String
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, tagId])
  @@map("report_tags")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model SavedSearch {
  id        String   @id @default(cuid())
  name      String
  query     String
  filters   String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model File {
  id               String   @id @default(cuid())
  filename         String
  originalName     String
  mimeType         String
  size             Int
  path             String
  reportId         String?
  createdAt        DateTime @default(now())
  originalSize     Int?
  compressedSize   Int?
  isCompressed     Boolean  @default(false)
  compressionRatio Float?
  optimizationInfo String?
  report           Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("files")
}
